// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  status        Status    @default(ACTIVE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  phoneNumber   String?   @unique
  ssn          String?   @unique
  businessNumber String?  @unique
  postcode     String?
  address      String?
  addressDetail String?
  snsAccounts  SnsAccount[]
  userType     UserType  @default(INDIVIDUAL)

  accounts      Account[]
  sessions      Session[]
  applications  CampaignApplication[]
  reviews       Review[]
  notifications Notification[]
  notificationSettings NotificationSettings?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Campaign {
  id                  Int           @id @default(autoincrement())
  title              String
  description        String        @db.Text
  imageUrl           String?
  reward             Int
  maxParticipants    Int
  currentParticipants Int          @default(0)
  startDate          DateTime
  endDate            DateTime
  locationData       Json?         @map("location")
  snsTypes           String[]
  requirements       String        @db.Text
  reviewTemplate     String?       @db.Text
  status            String        @default("ONGOING")
  isVisible         Boolean       @default(false)
  showPopular       Boolean       @default(false)
  showDeadline      Boolean       @default(false)
  showLatest        Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  applications      CampaignApplication[]
  reviews           Review[]
  notifications     Notification[]
  categories        CampaignCategory[] @relation("CampaignToCampaignCategory")
  visitCategory     VisitCategory?     @relation(fields: [visitCategoryId], references: [id])
  deliveryCategory  DeliveryCategory?  @relation(fields: [deliveryCategoryId], references: [id])
  location         Location?          @relation(fields: [locationId], references: [id])
  seo              SEO?
  
  visitCategoryId    Int?
  deliveryCategoryId Int?
  locationId         Int?

  @@map("campaigns")
}

model Location {
  id        Int        @id @default(autoincrement())
  city      String
  district  String
  address   String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  campaigns Campaign[]

  @@index([city, district])
  @@map("locations")
}

model VisitCategory {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  campaigns   Campaign[]
}

model DeliveryCategory {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  campaigns   Campaign[]
}

model CampaignCategory {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  campaigns Campaign[] @relation("CampaignToCampaignCategory")
}

model CampaignApplication {
  id         Int       @id @default(autoincrement())
  campaignId Int
  userId     Int
  status     String    @default("PENDING")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  campaign   Campaign  @relation(fields: [campaignId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
  review     Review?   @relation("ApplicationReview")

  @@map("campaign_applications")
}

model Review {
  id          Int      @id @default(autoincrement())
  userId      Int
  campaignId  Int
  applicationId Int?    @unique
  title       String
  content     String   @db.Text
  rating      Int
  status      String   @default("DRAFT")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  campaign    Campaign @relation(fields: [campaignId], references: [id])
  application CampaignApplication? @relation("ApplicationReview", fields: [applicationId], references: [id])

  @@map("reviews")
}

model SEO {
  id            Int       @id @default(autoincrement())
  pageType      String
  pageId        Int?      @unique
  title         String
  description   String
  keywords      String?
  ogTitle       String?
  ogDescription String?
  ogImage       String?
  canonical     String?
  robots        String    @default("index,follow")
  schema        Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  campaign      Campaign? @relation(fields: [pageId], references: [id])

  @@unique([pageType, pageId])
}

model NotificationSettings {
  id                 Int      @id @default(autoincrement())
  userId            Int      @unique
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  campaignUpdates    Boolean  @default(true)
  applicationStatus  Boolean  @default(true)
  reviewReminders    Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])

  @@map("notification_settings")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  content   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  campaign  Campaign? @relation(fields: [campaignId], references: [id])
  campaignId Int?

  @@map("notifications")
}

model SnsAccount {
  id        Int      @id @default(autoincrement())
  userId    Int
  platform  SnsPlatform
  username  String
  url       String?
  followerCount Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
  @@map("sns_accounts")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum SnsPlatform {
  INSTAGRAM
  YOUTUBE
  TIKTOK
  FACEBOOK
  BLOG
}

enum UserType {
  INDIVIDUAL
  BUSINESS
}
